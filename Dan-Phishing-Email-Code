import tkinter as tk
from tkinter import ttk, messagebox, font
from tkinter.scrolledtext import ScrolledText
import re
import datetime
from email.utils import parsedate_to_datetime

# Version Information
VERSION = "1.5.0"

# Global Variables
history = []
current_theme = "light"

# Theme Colors
themes = {
    "light": {
        "bg": "#f0f0f0",
        "text_bg": "white",
        "text_fg": "black",
        "button_bg": "#e1e1e1",
        "button_fg": "black",
        "highlight": "#4a6baf",
        "output_bg": "white",
        "output_fg": "black",
        "frame_bg": "#e0e0e0",
        "status_bg": "#d0d0d0"
    },
    "dark": {
        "bg": "#2d2d2d",
        "text_bg": "#1e1e1e",
        "text_fg": "#e1e1e1",
        "button_bg": "#3d3d3d",
        "button_fg": "white",
        "highlight": "#5d8aff",
        "output_bg": "#1e1e1e",
        "output_fg": "#e1e1e1",
        "frame_bg": "#3d3d3d",
        "status_bg": "#1a1a1a"
    }
}


def extract_field(header_text, field_name):
    pattern = rf"{field_name}\s*(.*)"
    match = re.search(pattern, header_text, re.IGNORECASE)
    if match:
        return match.group(1).strip()
    return None


def extract_multiple_fields(header_text, field_name):
    pattern = re.compile(rf"{field_name}\s*(.*)", re.IGNORECASE)
    matches = pattern.findall(header_text)
    return matches


def extract_ips(received_fields):
    ips = []
    ip_pattern = re.compile(r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b')
    for line in received_fields:
        found_ips = ip_pattern.findall(line)
        ips.extend(found_ips)
    return list(set(ips))


def extract_email_datetime(header_text):
    """Extract the email received datetime from headers"""
    date_match = re.search(r"Date:\s*(.+?)\n", header_text, re.IGNORECASE)
    if date_match:
        date_str = date_match.group(1).strip()
        try:
            return parsedate_to_datetime(date_str).strftime("%Y-%m-%d %H:%M:%S")
        except:
            return date_str
    return "Unknown"


def extract_multiple_emails(header_text):
    """Split raw text into multiple email headers if detected"""
    email_separators = [
        r"From\s.+?\n\n",
        r"Return-Path:\s.+?\n\n",
        r"Received:\sfrom.+?\n\n"
    ]

    for pattern in email_separators:
        emails = re.split(pattern, header_text)
        if len(emails) > 1:
            return [pattern + email for email in emails[1:]]
    return [header_text]


def calculate_score(results):
    score = 5  # base score
    if results.get('SPF') == 'PASS':
        score += 1
    if results.get('DKIM') == 'PASS':
        score += 1
    if results.get('DMARC') == 'PASS':
        score += 1
    if results.get('Return-Path Match') == 'Yes':
        score += 2
    elif results.get('Return-Path Match') == 'No':
        score -= 1

    from_domain = results.get('From', '')
    if any(domain in from_domain.lower() for domain in ['gmail.com', 'yahoo.com', 'outlook.com']):
        score -= 2

    if score < 1:
        score = 1
    if score > 10:
        score = 10

    return score


def analyze_single_email(email_text):
    results = {}
    email_datetime = extract_email_datetime(email_text)
    results['Email-Date'] = email_datetime

    from_field = extract_field(email_text, "From:")
    to_field = extract_field(email_text, "To:")
    cc_field = extract_field(email_text, "Cc:")
    subject_field = extract_field(email_text, "Subject:")
    spf_result = "PASS" if "spf=pass" in email_text.lower() else "FAIL"
    dkim_result = "PASS" if "dkim=pass" in email_text.lower() else "FAIL"
    dmarc_result = "PASS" if "dmarc=pass" in email_text.lower() else "FAIL"
    return_path = extract_field(email_text, "Return-Path:")
    received_fields = extract_multiple_fields(email_text, "Received:")

    results['From'] = from_field
    results['To'] = to_field
    results['Cc'] = cc_field
    results['Subject'] = subject_field
    results['SPF'] = spf_result
    results['DKIM'] = dkim_result
    results['DMARC'] = dmarc_result
    results['Return-Path'] = return_path
    results['Received'] = received_fields
    results['IP-Addresses'] = extract_ips(received_fields)

    if from_field and return_path:
        from_domain = from_field.split("@")[-1].strip(">").strip()
        return_domain = return_path.split("@")[-1].strip(">").strip()
        if from_domain.lower() == return_domain.lower():
            results['Return-Path Match'] = "Yes"
        else:
            results['Return-Path Match'] = "No"
    else:
        results['Return-Path Match'] = "Unknown"

    results['Trust-Score'] = calculate_score(results)
    return results


def analyze_header():
    raw_text = text_input.get("1.0", tk.END)
    if not raw_text.strip():
        messagebox.showwarning("Empty Input", "Please paste email headers to analyze.")
        return

    emails = extract_multiple_emails(raw_text)
    total_emails = len(emails)

    output_text.config(state='normal')
    output_text.delete("1.0", tk.END)

    output_text.insert(tk.END, f"📧 Found {total_emails} email(s) in input\n\n", "title")

    for i, email_text in enumerate(emails, 1):
        if total_emails > 1:
            output_text.insert(tk.END, f"━━━━━━━━ Email {i}/{total_emails} ━━━━━━━━\n", "blue")

        results = analyze_single_email(email_text)
        display_results(results, i, total_emails)

        if total_emails > 1:
            output_text.insert(tk.END, "\n" + "━" * 40 + "\n\n", "blue")

        history.append(results)

    output_text.config(state='disabled')
    output_text.see("1.0")
    update_time()


def display_results(results, email_num=1, total_emails=1):
    output_text.insert(tk.END, f"📅 Received: {results['Email-Date']}\n", "normal")

    def insert_field(label, value, color="green"):
        if value:
            output_text.insert(tk.END, f"{label}: ", "normal")
            output_text.insert(tk.END, f"{value}\n", color)
        else:
            output_text.insert(tk.END, f"{label}: Not Found ❗\n", "red")

    insert_field("From", results.get('From'))
    insert_field("To", results.get('To'), "yellow")
    insert_field("Cc", results.get('Cc'), "yellow")
    insert_field("Subject", results.get('Subject'), "yellow")
    insert_field("SPF", results.get('SPF'), "green" if results.get('SPF') == 'PASS' else "red")
    insert_field("DKIM", results.get('DKIM'), "green" if results.get('DKIM') == 'PASS' else "red")
    insert_field("DMARC", results.get('DMARC'), "green" if results.get('DMARC') == 'PASS' else "red")
    insert_field("Return-Path", results.get('Return-Path'))

    if results.get('Return-Path Match') == "Yes":
        output_text.insert(tk.END, "Return-Path matches From domain ✅\n", "green")
    elif results.get('Return-Path Match') == "No":
        output_text.insert(tk.END, "Warning: Return-Path differs from From domain! ⚠️\n", "red")
    else:
        output_text.insert(tk.END, "Return-Path Match Status: Unknown\n", "yellow")

    trust_score = results['Trust-Score']
    output_text.insert(tk.END, "\nTrust Score: ", "normal")
    score_color = "red"
    if trust_score > 7:
        score_color = "green"
    elif trust_score > 4:
        score_color = "yellow"
    output_text.insert(tk.END, f"{trust_score}/10\n", score_color)

    bar_length = int(trust_score * 10)
    output_text.insert(tk.END, "[" + "█" * bar_length + " " * (100 - bar_length) + "]\n\n", score_color)

    output_text.insert(tk.END, "Received Headers:\n", "blue")
    for rcv in results.get('Received', []):
        output_text.insert(tk.END, f"➔ {rcv}\n", "yellow")

    output_text.insert(tk.END, "\nExtracted IP Addresses:\n", "blue")
    for ip in results.get('IP-Addresses', []):
        output_text.insert(tk.END, f"• {ip}\n", "yellow")
        output_text.insert(tk.END, f"🔗 https://www.virustotal.com/gui/ip-address/{ip}\n", "green")


def update_time():
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    time_label.config(text=f"Last Analyzed: {now}")


def toggle_theme():
    global current_theme
    if current_theme == "light":
        current_theme = "dark"
    else:
        current_theme = "light"
    apply_theme()


def apply_theme():
    theme = themes[current_theme]
    root.configure(bg=theme["bg"])

    style.configure("TFrame", background=theme["bg"])
    style.configure("TLabel", background=theme["bg"], foreground=theme["text_fg"])
    style.configure("TButton",
                    background=theme["button_bg"],
                    foreground=theme["button_fg"],
                    bordercolor=theme["highlight"],
                    focuscolor=theme["highlight"])
    style.configure("TLabelframe", background=theme["frame_bg"], foreground=theme["text_fg"])
    style.configure("TLabelframe.Label", background=theme["frame_bg"], foreground=theme["highlight"])

    time_label.config(bg=theme["bg"], fg=theme["text_fg"])
    score_label.config(bg=theme["bg"], fg=theme["highlight"])
    score_text.config(bg=theme["bg"], fg=theme["text_fg"])
    version_label.config(bg=theme["bg"], fg=theme["text_fg"])
    text_input.config(bg=theme["text_bg"], fg=theme["text_fg"],
                      insertbackground=theme["text_fg"])
    output_text.config(bg=theme["output_bg"], fg=theme["output_fg"])
    status_bar.config(bg=theme["status_bg"], fg=theme["text_fg"])

    output_text.tag_config("title", foreground=theme["highlight"])
    output_text.tag_config("normal", foreground=theme["output_fg"])


def clear_fields():
    text_input.delete("1.0", tk.END)
    output_text.config(state='normal')
    output_text.delete("1.0", tk.END)
    output_text.config(state='disabled')
    score_var.set(0)


def copy_results():
    root.clipboard_clear()
    root.clipboard_append(output_text.get("1.0", tk.END))
    messagebox.showinfo("Copied", "Results copied to clipboard!")


# Main Window
root = tk.Tk()
root.title(f"Email Header Analyzer Pro v{VERSION}")
root.geometry("1000x800")
root.minsize(800, 600)

# Initialize styles
style = ttk.Style()
style.theme_use('clam')

# Create main container
main_frame = ttk.Frame(root)
main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

# Header Frame
header_frame = ttk.Frame(main_frame)
header_frame.pack(fill=tk.X, pady=(0, 10))

# Left side - Time Label
time_label = tk.Label(header_frame, text="", font=("Arial", 10))
time_label.pack(side=tk.LEFT)

# Center - Version Label
version_label = tk.Label(header_frame, text=f"v{VERSION}", font=("Arial", 8))
version_label.pack(side=tk.LEFT, padx=10)

# Right side - Score Display
score_frame = ttk.Frame(header_frame)
score_frame.pack(side=tk.RIGHT)

score_text = tk.Label(score_frame, text="Trust Score:", font=("Arial", 10))
score_text.pack(side=tk.LEFT)

score_var = tk.IntVar(value=0)
score_label = tk.Label(score_frame, textvariable=score_var, font=("Arial", 12, "bold"))
score_label.pack(side=tk.LEFT)

# Input Frame
input_frame = ttk.LabelFrame(main_frame, text="Paste Email Header Here", padding=10)
input_frame.pack(fill=tk.BOTH, expand=False)

# Input Text Box with scrollbar
text_input = ScrolledText(input_frame, height=12, wrap=tk.WORD, font=("Consolas", 10))
text_input.pack(fill=tk.BOTH, expand=True)

# Button Frame
button_frame = ttk.Frame(main_frame)
button_frame.pack(fill=tk.X, pady=5)

# Buttons
analyze_btn = ttk.Button(button_frame, text="🔍 Analyze Header", command=analyze_header)
analyze_btn.pack(side=tk.LEFT, padx=5)

clear_btn = ttk.Button(button_frame, text="🗑️ Clear All", command=clear_fields)
clear_btn.pack(side=tk.LEFT, padx=5)

theme_btn = ttk.Button(button_frame, text="🌓 Toggle Theme", command=toggle_theme)
theme_btn.pack(side=tk.LEFT, padx=5)

copy_btn = ttk.Button(button_frame, text="📋 Copy Results", command=copy_results)
copy_btn.pack(side=tk.LEFT, padx=5)

# Output Frame
output_frame = ttk.LabelFrame(main_frame, text="Analysis Results", padding=10)
output_frame.pack(fill=tk.BOTH, expand=True)

# Output Text Box with scrollbar
output_text = ScrolledText(output_frame, height=25, wrap=tk.WORD, font=("Consolas", 10), state='disabled')
output_text.pack(fill=tk.BOTH, expand=True)

# Configure tags for colored output
output_text.tag_config("title", foreground=themes[current_theme]["highlight"], font=("Arial", 12, "bold"))
output_text.tag_config("normal", foreground=themes[current_theme]["output_fg"])
output_text.tag_config("green", foreground="#2ecc71")
output_text.tag_config("red", foreground="#e74c3c")
output_text.tag_config("yellow", foreground="#f39c12")
output_text.tag_config("blue", foreground="#3498db")
output_text.tag_config("cyan", foreground="#1abc9c")

# Status Bar
status_bar = tk.Label(root, text="Ready", relief=tk.SUNKEN, anchor=tk.W, font=("Arial", 9))
status_bar.pack(fill=tk.X, side=tk.BOTTOM, ipady=2)

# Apply initial theme
apply_theme()
# This is Created By Dan Mir (https://www.linkedin.com/in/danishahmadmir/)
# Run Main Loop
root.mainloop()
